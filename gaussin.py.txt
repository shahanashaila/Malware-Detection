

model = GaussianNB()
model.fit(traindata, trainlabel)
print(model)
# make predictions
expected = testlabel
predicted = model.predict(testdata)
np.savetxt('/content/drive/MyDrive/Colab Notebooks/AMDwithPermission-ML-master/88permissionBycckenny/res/predictedNB.txt', predicted, fmt='%01d')
accuracy = accuracy_score(expected, predicted)
recall = recall_score(expected, predicted, average="binary")
precision = precision_score(expected, predicted , average="binary")
f1 = f1_score(expected, predicted , average="binary")
print('GaussianNB')
cm = metrics.confusion_matrix(expected, predicted)
print(cm)
fpr = float(cm[0][1])/np.sum(cm[0])
frr = float(cm[1][0])/np.sum(cm[1])
print("Accuracy")
print("%.3f" %accuracy)
print("precision")
print("%.3f" %precision)
print("recall")
print("%.3f" %recall)
print("f-score")
print("%.3f" %f1)
print("FPR")
print("%.3f" %fpr)
print("FRR")
print("%.3f" %frr)
