

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn import metrics
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import (precision_score, recall_score,f1_score, accuracy_score,mean_squared_error,mean_absolute_error)
from sklearn.metrics import confusion_matrix
from sklearn.metrics import (precision_score, recall_score,f1_score, accuracy_score,mean_squared_error,mean_absolute_error, roc_curve, classification_report,auc)


traindata = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/AMDwithPermission-ML-master/dangerousPidBycckenny/test.csv')
testdata = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/AMDwithPermission-ML-master/dangerousPidBycckenny/newTest.csv')

X = traindata.iloc[:,0:22]
Y = traindata.iloc[:,22]
C = testdata.iloc[:,22]
T = testdata.iloc[:,0:22]



traindata = np.array(X)
trainlabel = np.array(Y)

testdata = np.array(T)
testlabel = np.array(C)



model = LogisticRegression()
model.fit(traindata, trainlabel)


# make predictions
expected = testlabel
predicted = model.predict(testdata)
np.savetxt('/content/drive/MyDrive/Colab Notebooks/AMDwithPermission-ML-master/88permissionBycckenny/res/predictedLR.txt', predicted, fmt='%01d')
accuracy = accuracy_score(expected, predicted)
recall = recall_score(expected, predicted, average="binary")
precision = precision_score(expected, predicted , average="binary")
f1 = f1_score(expected, predicted , average="binary")
print('LogisticRegression')
cm = metrics.confusion_matrix(expected, predicted)
print(cm)
fpr = float(cm[0][1])/np.sum(cm[0])
frr = float(cm[1][0])/np.sum(cm[1])
print("Accuracy")
print("%.3f" %accuracy)
